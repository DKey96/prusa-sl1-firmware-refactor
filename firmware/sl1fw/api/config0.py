# This file is part of the SL1 firmware
# Copyright (C) 2014-2018 Futur3d - www.futur3d.net
# Copyright (C) 2018-2019 Prusa Research s.r.o. - www.prusa3d.com
# SPDX-License-Identifier: GPL-3.0-or-later

from __future__ import annotations

import functools
from typing import Any

from pydbus.generic import signal

from sl1fw.api.decorators import auto_dbus, dbus_api
from sl1fw.libConfig import HwConfig


def wrap_hw_config(cls: Config0):
    """
    This is a custom decorator that adds properties to target class that map to HWConfig properties

    :param cls: Target class, Has to be config compatible
    :return: Modified class with properties added
    """
    for val in vars(HwConfig):
        if val.startswith("raw_"):
            continue

        if not isinstance(getattr(HwConfig, val), property):
            continue

        def func():
            pass

        func.__name__ = val
        setattr(cls, val, auto_dbus(wrap_property()(func)))
        if val not in cls._CHANGED_MAP:
            cls._CHANGED_MAP[val] = set()
        cls._CHANGED_MAP[val].add(val)
    return cls


def wrap_property(func_name=None):
    """
    Parametric decorator to turn a function into a property mapping to HWConfig property

    :param func_name: Input function
    :return: mapped property
    """

    def decor(func):
        if func_name is None:
            name = func.__name__
        else:
            name = func_name
        f = getattr(HwConfig, name)

        @functools.wraps(f.fget)
        def getter(self):
            return getattr(self._hw_config, name)

        getter.__name__ = func.__name__
        getter.__doc__ = f.__doc__

        @functools.wraps(f.fset)
        def setter(self, value):
            setattr(self._hw_config, name, value)

        return property(fget=getter, fset=setter)

    return decor


@dbus_api
@wrap_hw_config
class Config0:
    """
    This class provides automatic mapping to HwConfig properties

    The content is generated by a decorator based on the current HwConfig specification. This allows us to expose new
    HwConfig properties automatically. Simple on change mapping is added automatically hwconfig.name -> Config0.name.
    This one can be extended by putting custom mapping to _CHANGED_MAP.
    """

    __INTERFACE__ = "cz.prusa3d.sl1.config0"

    PropertiesChanged = signal()

    def __init__(self, hw_config: HwConfig):
        self._hw_config = hw_config
        self._hw_config.add_onchange_handler(self._on_change)

    @auto_dbus
    def save(self) -> None:
        """
        Save the configuration

        :return: None
        """
        self._hw_config.write()

    def _on_change(self, key: str, _: Any):
        if key in self._CHANGED_MAP:
            for changed in self._CHANGED_MAP[key]:
                self.PropertiesChanged(self.__INTERFACE__, {changed: getattr(self._hw_config, key)}, [])

    _CHANGED_MAP = {
        "screwMm": {"microStepsMM"},
        "limit4fast": {"whitePixelsThd"},
        "raw_tiltdownlargefill": {"tuneTilt"},
        "raw_tiltdownsmallfill": {"tuneTilt"},
        "raw_tiltup": {"tuneTilt"},
        "raw_calibrated": {"calibrated"},
        "tiltHeight": {"calibrated"},
    }
